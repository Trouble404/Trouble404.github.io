<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[(Logbook) -- Object Detection System Based on CNN and Capsule Network]]></title>
    <url>%2F2018%2F05%2F25%2FLogBook%2F</url>
    <content type="text"><![CDATA[Gantt chart Check list 1) preparation 1.1) Familiarization with develop tools 1.1.1) Keras 1.1.2) Pythrch 1.2) Presentation 1.2.1) Poster conference 2) Create image database 2.1) Confirmation of detected objects 2.2) Collect and generate the dataset 3) Familiarization with CNN based object detection methods 3.1) R-CNN 3.2) SPP-net 3.3) Fast R-CNN 3.4) Faster R-CNN 4) Implement object detection system based on one chosen CNN method 4.1) Pre-processing of images 4.2) Extracting features 4.3) Mode architecture 4.4) Train model and optimization 4.5) Models ensemble 5) Implement object detection system based on Capsule network 5.1) Investigate and familiarisation with the principle of Capsule network. 5.2) Building and testing mode 6) Analysis work 6.1) Evaluation of detection result of two methods. 6.2) Analyse the difference between two methods. 7) Paperwork and bench inspection 7.1) Logbook 7.2) Write the thesis 7.3) Project video 7.4) Speech and ppt of bench inspection 8) Documents 8.1) Project Brief May【28/05/2018】Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano. Keras document Keras 文档 Installation TensorFlowMicrosoft Visual Studio 2015CUDA 9.0cuDNN7Anaconda Step 1: Install VS2015 Step 2: Install CUDA 9.0 并添加环境变量 Step 3: Install cuDNN7 解压后把cudnn目录下的bin目录加到PATH环境变量里 Step 4: Install Anaconda 把安装路径添加到PATH里去, 在这里我用了 Python 3.5 Step 5: 使用Anaconda的命令行 新建一个虚拟环境,激活并且关联到jupyterbook123conda create --name tensorflow python=3.5activate tensorflowconda install nb_conda Step 6: Install GPU version TensorFlow.1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --ignore-installed --upgrade tensorflow-gpu Keras Step 1: 启动之前的 虚拟环境， 并且安装Keras GPU 版本12activate tensorflowpip install keras -U --pre 在硕士学习过程中，使用Keras的项目** NBA with Machine Learning Kaggle- Job salary prediction TensorFlow CPU 切换1234567891011import tensorflow as tf import osimport keras.backend.tensorflow_backend as KTF os.environ["CUDA_VISIBLE_DEVICES"] = "0" #设置需要使用的GPU的编号config = tf.ConfigProto()config.gpu_options.per_process_gpu_memory_fraction = 0.4 #设置使用GPU容量占GPU总容量的比例sess = tf.Session(config=config)KTF.set_session(sess)with tf.device('/cpu:0'): 这样可以在GPU版本的虚拟环境里面使用CPU计算 Jupyter Notebook 工作目录设置启动命令行，切换至预设的工作目录， 运行：1jupyter notebook --generate-config June【01/06/2018】PyTorch is a python package that provides two high-level features: Tensor computation (like numpy) with strong GPU acceleration Deep Neural Networks built on a tape-based autodiff system Package Description torch a Tensor library like NumPy, with strong GPU support torch.autograd a tape based automatic differentiation library that supports all differentiable Tensor operations in torch torch.nn a neural networks library deeply integrated with autograd designed for maximum flexibility torch.optim an optimization package to be used with torch.nn with standard optimization methods such as SGD, RMSProp, LBFGS, Adam etc. torch.multiprocessing python multiprocessing, but with magical memory sharing of torch Tensors across processes. Useful for data loading and hogwild training. torch.utils DataLoader, Trainer and other utility functions for convenience torch.legacy(.nn/.optim) legacy code that has been ported over from torch for backward compatibility reasons Installation Step 1: 使用Anaconda的命令行 新建一个虚拟环境,激活并且关联到jupyterbook123conda create --name pytorch python=3.5activate pytorchconda install nb_conda Step 2: Install GPU version PyTorch.12conda install pytorch cuda90 -c pytorch pip install torchvision Understanding of PyTorch TensorsTensors和numpy中的ndarrays较为相似, 与此同时Tensor也能够使用GPU来加速运算 123456789101112131415161718192021222324from __future__ import print_functionimport torchx = torch.Tensor(5, 3) # 构造一个未初始化的5*3的矩阵x = torch.rand(5, 3) # 构造一个随机初始化的矩阵x # 此处在notebook中输出x的值来查看具体的x内容x.size()#NOTE: torch.Size 事实上是一个tuple, 所以其支持相关的操作*y = torch.rand(5, 3)#此处 将两个同形矩阵相加有两种语法结构x + y # 语法一torch.add(x, y) # 语法二# 另外输出tensor也有两种写法result = torch.Tensor(5, 3) # 语法一torch.add(x, y, out=result) # 语法二y.add_(x) # 将y与x相加# 特别注明：任何可以改变tensor内容的操作都会在方法名后加一个下划线'_'# 例如：x.copy_(y), x.t_(), 这俩都会改变x的值。#另外python中的切片操作也是资次的。x[:,1] #这一操作会输出x矩阵的第二列的所有值 Numpy桥将Torch的Tensor和numpy的array相互转换简，注意Torch的Tensor和numpy的array会共享他们的存储空间，修改一个会导致另外的一个也被修改。 1234567891011121314151617181920212223# 此处演示tensor和numpy数据结构的相互转换a = torch.ones(5)b = a.numpy()# 此处演示当修改numpy数组之后,与之相关联的tensor也会相应的被修改a.add_(1)print(a)print(b)# 将numpy的Array转换为torch的Tensorimport numpy as npa = np.ones(5)b = torch.from_numpy(a)np.add(a, 1, out=a)print(a)print(b)# 另外除了CharTensor之外，所有的tensor都可以在CPU运算和GPU预算之间相互转换# 使用CUDA函数来将Tensor移动到GPU上# 当CUDA可用时会进行GPU的运算if torch.cuda.is_available(): x = x.cuda() y = y.cuda() 使用PyTorch设计一个CIFAR10数据集的分类模型code MMdnnMMdnn is a set of tools to help users inter-operate among different deep learning frameworks. E.g. model conversion and visualization. Convert models between Caffe, Keras, MXNet, Tensorflow, CNTK, PyTorch Onnx and CoreML. MMdnn主要有以下特征： 模型文件转换器，不同的框架间转换DNN模型 模型代码片段生成器，生成适合不同框架的代码 模型可视化，DNN网络结构和框架参数可视化 模型兼容性测试（正在进行中） Github 【04/06/2018】Dataset: VOC 2012 Dataset Introduce: Visual Object Classes Challenge 2012 (VOC2012)PASCAL‘s full name is Pattern Analysis, Statistical Modelling and Computational Learning.VOC’s full name is Visual OBject Classes.The first competition was held in 2005 and terminated in 2012. I will use the last updated dataset which is VOC2012 dataset. The main aim of this competition is object detection, there are 20 classes objects in the dataset: person bird, cat, cow, dog, horse, sheep aeroplane, bicycle, boat, bus, car, motorbike, train bottle, chair, dining table, potted plant, sofa, tv/monitor Detection TaskReferenced:The PASCAL Visual Object Classes Challenge 2012 (VOC2012) Development KitMark Everingham - John Winnhttp://host.robots.ox.ac.uk/pascal/VOC/voc2012/htmldoc/index.html Task:For each of the twenty classes predict the bounding boxes of each object of that class in a test image (if any). Each bounding box should be output with an associated real-valued confidence of the detection so that a precision/recall curve can be drawn. Participants may choose to tackle all, or any subset of object classes, for example ‘cars only’ or ‘motorbikes and cars’. Competitions:Two competitions are defined according to the choice of training data: taken from the $VOC_{trainval}$ data provided. from any source excluding the $VOC_{test}$ data provided. Submission of Results:A separate text file of results should be generated for each competition and each class e.g. `car’. Each line should be a detection output by the detector in the following format: 1&lt;image identifier&gt; &lt;confidence&gt; &lt;left&gt; &lt;top&gt; &lt;right&gt; &lt;bottom&gt; where (left,top)-(right,bottom) defines the bounding box of the detected object. The top-left pixel in the image has coordinates $(1,1)$. Greater confidence values signify greater confidence that the detection is correct. An example file excerpt is shown below. Note that for the image 2009_000032, multiple objects are detected:1234567comp3_det_test_car.txt: ... 2009_000026 0.949297 172.000000 233.000000 191.000000 248.000000 2009_000032 0.013737 1.000000 147.000000 114.000000 242.000000 2009_000032 0.013737 1.000000 134.000000 94.000000 168.000000 2009_000035 0.063948 455.000000 229.000000 491.000000 243.000000 ... Evaluation:The detection task will be judged by the precision/recall curve. The principal quantitative measure used will be the average precision (AP). Detections are considered true or false positives based on the area of overlap with ground truth bounding boxes. To be considered a correct detection, the area of overlap $a_o$ between the predicted bounding box $B_p$ and ground truth bounding box $B_{gt}$ must exceed $50\%$ by the formula: $a_o = \frac{area(B_p \cap B_{gt})}{area(B_p \cup B_{gt})}$ XML标注格式 对于目标检测来说，每一张图片对应一个xml格式的标注文件。所以你会猜到，就像gemfield准备的训练集有8万张照片一样，在存放xml文件的目录里，这里也将会有8万个xml文件。下面是其中一个xml文件的示例： 123456789101112131415161718192021222324252627282930313233 &lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;annotation&gt; &lt;folder&gt;VOC2007&lt;/folder&gt; &lt;filename&gt;test100.mp4_3380.jpeg&lt;/filename&gt; &lt;size&gt; &lt;width&gt;1280&lt;/width&gt; &lt;height&gt;720&lt;/height&gt; &lt;depth&gt;3&lt;/depth&gt; &lt;/size&gt; &lt;object&gt; &lt;name&gt;gemfield&lt;/name&gt; &lt;bndbox&gt; &lt;xmin&gt;549&lt;/xmin&gt; &lt;xmax&gt;715&lt;/xmax&gt; &lt;ymin&gt;257&lt;/ymin&gt; &lt;ymax&gt;289&lt;/ymax&gt; &lt;/bndbox&gt; &lt;truncated&gt;0&lt;/truncated&gt; &lt;difficult&gt;0&lt;/difficult&gt; &lt;/object&gt; &lt;object&gt; &lt;name&gt;civilnet&lt;/name&gt; &lt;bndbox&gt; &lt;xmin&gt;842&lt;/xmin&gt; &lt;xmax&gt;1009&lt;/xmax&gt; &lt;ymin&gt;138&lt;/ymin&gt; &lt;ymax&gt;171&lt;/ymax&gt; &lt;/bndbox&gt; &lt;truncated&gt;0&lt;/truncated&gt; &lt;difficult&gt;0&lt;/difficult&gt; &lt;/object&gt; &lt;segmented&gt;0&lt;/segmented&gt;&lt;/annotation&gt; 在这个测试图片上，我们标注了2个object，一个是gemfield，另一个是civilnet。 在这个xml例子中： bndbox是一个轴对齐的矩形，它框住的是目标在照片中的可见部分； truncated表明这个目标因为各种原因没有被框完整（被截断了），比如说一辆车有一部分在画面外； occluded是说一个目标的重要部分被遮挡了（不管是被背景的什么东西，还是被另一个待检测目标遮挡）； difficult表明这个待检测目标很难识别，有可能是虽然视觉上很清楚，但是没有上下文的话还是很难确认它属于哪个分类；标为difficult的目标在测试成绩的评估中一般会被忽略。 注意：在一个object中，name 标签要放在前面，否则的话，目标检测的一个重要工程实现SSD会出现解析数据集错误（另一个重要工程实现py-faster-rcnn则不会）。 【07/06/2018】Poster conference 5 People in one group to present their object.I present this object to my supervisor in this conference. 【11/06/2018】R-CNNPaper: Rich feature hierarchies for accurate object detection and semantic segmentation 【论文主要特点】（相对传统方法的改进） 速度： 经典的目标检测算法使用滑动窗法依次判断所有可能的区域。本文则(采用Selective Search方法)预先提取一系列较可能是物体的候选区域，之后仅在这些候选区域上(采用CNN)提取特征，进行判断。 训练集： 经典的目标检测算法在区域中提取人工设定的特征。本文则采用深度网络进行特征提取。使用两个数据库： 一个较大的识别库 （ImageNet ILSVC 2012）：标定每张图片中物体的类别。一千万图像，1000类。 一个较小的检测库（PASCAL VOC 2007）：标定每张 图片中，物体的类别和位置，一万图像，20类。 本文使用识别库进行预训练得到CNN（有监督预训练），而后用检测库调优参数，最后在 检测库上评测。 【流程】 候选区域生成： 一张图像生成1K~2K个候选区域 （采用Selective Search 方法） 特征提取： 对每个候选区域，使用深度卷积网络提取特征 （CNN） 类别判断： 特征送入每一类的SVM 分类器，判别是否属于该类 位置精修： 使用回归器精细修正候选框位置 【Selective Search】 使用一种过分割手段，将图像分割成小区域 (1k~2k 个) 查看现有小区域，按照合并规则合并可能性最高的相邻两个区域。重复直到整张图像合并成一个区域位置 输出所有曾经存在过的区域，所谓候选区域其中合并规则如下： 优先合并以下四种区域： 颜色（颜色直方图）相近的 纹理（梯度直方图）相近的 合并后总面积小的： 保证合并操作的尺度较为均匀，避免一个大区域陆续“吃掉”其他小区域 （例：设有区域a-b-c-d-e-f-g-h。较好的合并方式是：ab-cd-ef-gh -&gt; abcd-efgh -&gt; abcdefgh。 不好的合并方法是：ab-c-d-e-f-g-h -&gt;abcd-e-f-g-h -&gt;abcdef-gh -&gt; abcdefgh） 合并后，总面积在其BBOX中所占比例大的： 保证合并后形状规则。 【12/06/2018】SPP-CNNPaper: Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition 【论文主要特点】（相对传统方法的改进） RCNN使用CNN作为特征提取器，首次使得目标检测跨入深度学习的阶段。但是RCNN对于每一个区域候选都需要首先将图片放缩到固定的尺寸（224*224），然后为每个区域候选提取CNN特征。容易看出这里面存在的一些性能瓶颈： 速度瓶颈：重复为每个region proposal提取特征是极其费时的，Selective Search对于每幅图片产生2K左右个region proposal，也就是意味着一幅图片需要经过2K次的完整的CNN计算得到最终的结果。 性能瓶颈：对于所有的region proposal防缩到固定的尺寸会导致我们不期望看到的几何形变，而且由于速度瓶颈的存在，不可能采用多尺度或者是大量的数据增强去训练模型。 【流程】 首先通过selective search产生一系列的region proposal 然后训练多尺寸识别网络用以提取区域特征，其中处理方法是每个尺寸的最短边大小在尺寸集合中：$s \in S = {480,576,688,864,1200}$训练的时候通过上面提到的多尺寸训练方法，也就是在每个epoch中首先训练一个尺寸产生一个model，然后加载这个model并训练第二个尺寸，直到训练完所有的尺寸。空间金字塔池化使用的尺度为：1*1，2*2，3*3，6*6，一共是50个bins。 在测试时，每个region proposal选择能使其包含的像素个数最接近224*224的尺寸，提取相 应特征。 训练SVM，BoundingBox回归. 【13/06/2018】FAST R-CNNPaper: Fast R-CNN 【论文主要特点】（相对传统方法的改进） 测试时速度慢：RCNN一张图像内候选框之间大量重叠，提取特征操作冗余。本文将整张图像归一化后直接送入深度网络。在邻接时，才加入候选框信息，在末尾的少数几层处理每个候选框。 训练时速度慢 ：原因同上。在训练时，本文先一张图像送入网络，紧接着送入从这幅图像上提取出的候选区域。这些候选区域的前几层特征不需要再重复计算。 训练所需空间大: RCNN中独立的分类器和回归器需要大量特征作为训练样本。本文把类别判断和位置精调统一用深度网络实现，不再需要额外存储。 【流程】 网络首先用几个卷积层（conv）和最大池化层处理整个图像以产生conv特征图。 然后，对于每个对象建议框（object proposals ），感兴趣区域（region of interest——RoI）池层从特征图提取固定长度的特征向量。 每个特征向量被输送到分支成两个同级输出层的全连接（fc）层序列中：其中一层进行分类，对 目标关于K个对象类（包括全部“背景background”类）产生softmax概率估计，即输出每一个RoI的概率分布；另一层进行bbox regression，输出K个对象类中每一个类的四个实数值。每4个值编码K个类中的每个类的精确边界盒（bounding-box）位置，即输出每一个种类的的边界盒回归偏差。整个结构是使用多任务损失的端到端训练（trained end-to-end with a multi-task loss）。 【14~18/06/2018】FASTER R-CNNI want to use Faster R-cnn as the first method to implement object detection system. Paper: Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks 在结构上，Faster RCNN已经将特征抽取(feature extraction)，proposal提取，bounding box regression(rect refine)，classification都整合在了一个网络中，使得综合性能有较大提高，在检测速度方面尤为明显。 流程 Conv layers：作为一种CNN网络目标检测方法，Faster R-CNN首先使用一组基础的conv+relu+pooling层提取image的feature maps。该feature maps被共享用于后续RPN层和全连接层。 Region Proposal Networks：RPN网络用于生成region proposals。该层通过softmax判断anchors属于foreground或者background，再利用bounding box regression修正anchors获得精确的proposals。 Roi Pooling：该层收集输入的feature maps和proposals，综合这些信息后提取proposal feature maps，送入后续全连接层判定目标类别。 Classification：利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。 解释[1. Conv layers] Conv layers包含了conv，pooling，relu三种层。以python版本中的VGG16模型中的faster_rcnn_test.pt的网络结构为例，如图, Conv layers部分共有13个conv层，13个relu层，4个pooling层。这里有一个非常容易被忽略但是又无比重要的信息，在Conv layers中： 所有的conv层都是： $kernel_size=3$ ， $pad=1$ ， $stride=1$ 所有的pooling层都是： $kernel_size=2$ ， $pad=0$ ， $stride=2$ 为何重要？在Faster RCNN Conv layers中对所有的卷积都做了扩边处理（ $pad=1$ ，即填充一圈0），导致原图变为 $(M+2)\times (N+2)$ 大小，再做3x3卷积后输出 $M\times N$ 。正是这种设置，导致Conv layers中的conv层不改变输入和输出 矩阵大小。如下图：类似的是，Conv layers中的pooling层 $kernel_size=2$ ， $stride=2$ 。这样每个经过pooling层的 $M\times N$ 矩阵，都会变为 $(M/2) \times(N/2)$ 大小。综上所述，在整个Conv layers中，conv和relu层不改变输入输出大小，只有pooling层使输出长宽都变为输入的1/2。那么，一个 $M\times N$ 大小的矩阵经过Conv layers固定变为 $(M/16)\times (N/16)$ ！这样Conv layers生成的featuure map中都可以和原图对应起来。 [2. Region Proposal Networks(RPN)] 经典的检测方法生成检测框都非常耗时，如OpenCV adaboost使用滑动窗口+图像金字塔生成检测框；或如R-CNN使用SS(Selective Search)方法生成检测框。而Faster RCNN则抛弃了传统的滑动窗口和SS方法，直接使用RPN生成检测框，这也是Faster R-CNN的巨大 优势，能极大提升检测框的生成速度。 上图展示了RPN网络的具体结构。可以看到RPN网络实际分为2条线，上面一条通过softmax分类anchors获得foreground和 background（检测目标是foreground），下面一条用于计算对于anchors的bounding box regression偏移量，以获得精确的 proposal。而最后的Proposal层则负责综合foreground anchors和bounding box regression偏移量获取proposals，同时剔除太 小和超出边界的proposals。其实整个网络到了Proposal Layer这里，就完成了相当于目标定位的功能。 2.1 多通道图像卷积基础知识介绍 对于单通道图像+单卷积核做卷积，之前展示了； 对于多通道图像+多卷积核做卷积，计算方式如下： 输入有3个通道，同时有2个卷积核。对于每个卷积核，先在输入3个通道分别作卷积，再将3个通道结果加起来得到卷积输出。所以对 于某个卷积层，无论输入图像有多少个通道，输出图像通道数总是等于卷积核数量！对多通道图像做 $1\times1$ 卷积，其实就是将输入图像于每个通道乘以卷积系数后加在一起，即相当于把原图像中本来各个独立的 通道“联通”在了一起。2.2 Anchors提到RPN网络，就不能不说anchors。所谓anchors，实际上就是一组由rpn/generate_anchors.py生成的矩形。直接运行作者demo中 的generate_anchors.py可以得到以下输出：[[ -84. -40. 99. 55.][-176. -88. 191. 103.][-360. -184. 375. 199.][ -56. -56. 71. 71.][-120. -120. 135. 135.][-248. -248. 263. 263.][ -36. -80. 51. 95.][ -80. -168. 95. 183.][-168. -344. 183. 359.]]其中每行的4个值 $(x1,y1,x2,y2)$ 代表矩形左上和右下角点坐标。9个矩形共有3种形状，长宽比为大约为 $width:height = [1:1, 1:2, 2:1]$ 三种，如下图。实际上通过anchors就引入了检测中常用到的多尺度方法。注：关于上面的anchors size，其实是根据检测图像设置的。在python demo中，会把任意大小的输入图像reshape成 $800\times600$。再回头来看anchors的大小，anchors中长宽 1:2 中最大为 $352\times704$ ，长宽 2:1 中最大 $736\times384$ ，基本是cover了 $800\times600$ 的各个尺度和形状。那么这9个anchors是做什么的呢？借用Faster RCNN论文中的原图，如下图，遍历Conv layers计算获得的feature maps，为每一个点都配备这9种anchors作为初始的检测框。这样做获得检测框很不准确，不用担心，后面还有2次bounding box regression可以修正检测框位置。 解释一下上面这张图的数字。 在原文中使用的是ZF model中，其Conv Layers中最后的conv5层num_output=256，对应生成256张特征图，所以相当于feature map每个点都是256-dimensions 在conv5之后，做了rpn_conv/3x3卷积且num_output=256，相当于每个点又融合了周围3x3的空间信息（猜测这样做也许更鲁棒？反正我没测试），同时256-d不变（如图4和图7中的红框） 假设在conv5 feature map中每个点上有k个anchor（默认k=9），而每个anhcor要分foreground和background，所以每个点由256d feature转化为cls=2k scores；而每个anchor都有[x, y, w, h]对应4个偏移量，所以reg=4k coordinates 补充一点，全部anchors拿去训练太多了，训练程序会在合适的anchors中随机选取128个postive anchors+128个negative anchors进行训练（什么是合适的anchors下文5.1有解释） 2.3 softmax判定foreground与background 一副MxN大小的矩阵送入Faster RCNN网络后，到RPN网络变为(M/16)x(N/16)，不妨设 W=M/16 ， H=N/16 。在进入reshape与softmax之前，先做了1x1卷积，如下图： 该1x1卷积的caffe prototxt定义如下： 可以看到其num_output=18，也就是经过该卷积的输出图像为 $W\times H \times 18$ 大小（注意第二章开头提到的卷积计算方式）。这也就刚好对应了feature maps每一个点都有9个anchors，同时每个anchors又有可能是foreground和background，所有这些信息都保存 $W\times H\times (9\cdot2)$ 大小的矩阵。为何这样做？后面接softmax分类获得foreground anchors，也就相当于初步提取了检测目标候选区域box（一般认为目标在foreground anchors中）。综上所述，RPN网络中利用anchors和softmax初步提取出foreground anchors作为候选区域。 2.4 bounding box regression原理如图所示绿色框为飞机的Ground Truth(GT)，红色为提取的foreground anchors，即便红色的框被分类器识别为飞机，但是由于红色的框定位不准，这张图相当于没有正确的检测出飞机。所以我们希望采用一种方法对红色的框进行微调，使得foreground anchors和GT更加接近。对于窗口一般使用四维向量 (x, y, w, h) 表示，分别表示窗口的中心点坐标和宽高。对于下图，红色的框A代表原始的Foreground Anchors，绿色的框G代表目标的GT，我们的目标是寻找一种关系，使得输入原始的anchor A经过映射得到一个跟真实窗口G更接近的回归窗口G’，即： 给定：$anchor A=(A_{x}, A_{y}, A_{w}, A_{h})$ 和 $GT=[G_{x}, G_{y}, G_{w}, G_{h}]$ 寻找一种变换F，使得：$F(A_{x}, A_{y}, A_{w}, A_{h})=(G_{x}^{‘}, G_{y}^{‘}, G_{w}^{‘}, G_{h}^{‘})$，其中 $(G_{x}^{‘}, G_{y}^{‘}, G_{w}^{‘}, G_{h}^{‘}) \approx (G_{x}, G_{y}, G_{w}, G_{h})$那么经过何种变换F才能从图10中的anchor A变为G’呢？ 比较简单的思路就是: 先做平移 $G^{‘}{x} = A{w} \cdot d_{x}(A) + A_{x} $$G^{‘}{y} = A{y} \cdot d_{y}(A) + A_{y} $ 再做缩放$G^{‘}{w} = A{w} \cdot exp(d_{w}(A)) $$G^{‘}{h} = A{h} \cdot exp(d_{h}(A)) $ 观察上面4个公式发现，需要学习的是 $d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)$ 这四个变换。当输入的anchor A与GT相差较小时，可以认为这种变换是一种线性变换， 那么就可以用线性回归来建模对窗口进行微调（注意，只有当anchors A和GT比较接近时，才能使用线性回归模型，否则就是复杂的非线性问题了）。 接下来的问题就是如何通过线性回归获得 $d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)$ 了。线性回归就是给定输入的特征向量X, 学习一组参数W, 使得经过线性回归后的值跟真实值Y非常接近，即$Y=WX$。对于该问题，输入X是cnn feature map，定义为Φ；同时还有训练传入A与GT之间的变换量，即$(t_{x}, t_{y}, t_{w}, t_{h})$。输出是$d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)$四个变换。那么目标函数可以表示为： $d_{}(A) = w^{T}_{} \cdot \phi(A)$ 其中Φ(A)是对应anchor的feature map组成的特征向量，w是需要学习的参数，d(A)是得到的预测值（*表示 x，y，w，h，也就是每一个变换对应一个上述目标函数）。为了让预测值$(t_{x}, t_{y}, t_{w}, t_{h})$与真实值差距最小，设计损失函数： $Loss = \sum^{N}{i}(t^{i}{} - \hat{w}^{T}_{} \cdot \phi(A^{i}))^{2}$函数优化目标为：需要说明，只有在GT与需要回归框位置比较接近时，才可近似认为上述线性变换成立。说完原理，对应于Faster RCNN原文，foreground anchor与ground truth之间的平移量 $(t_x, t_y)$ 与尺度因子 $(t_w, t_h)$ 如下：对于训练bouding box regression网络回归分支，输入是cnn feature Φ，监督信号是Anchor与GT的差距 $(t_x, t_y, t_w, t_h)$，即训练目标是：输入Φ的情况下使网络输出与监督信号尽可能接近。那么当bouding box regression工作时，再输入Φ时，回归网络分支的输出就是每个Anchor的平移量和变换尺度 $(t_x, t_y, t_w, t_h)$，显然即可用来修正Anchor位置了。 2.5 对proposals进行bounding box regression在了解bounding box regression后，再回头来看RPN网络第二条线路，如下图。其 $num_output=36$ ，即经过该卷积输出图像为 $W\times H\times 36$ ，在caffe blob存储为 [1, 36, H, W] ，这里相当于feature maps每个点都有9个anchors，每个anchors又都有4个用于回归的$d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)$变换量。 2.6 Proposal LayerProposal Layer负责综合所有 $d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)$ 变换量和foreground anchors，计算出精准的proposal，送入后续RoI Pooling Layer。首先解释im_info。对于一副任意大小PxQ图像，传入Faster RCNN前首先reshape到固定 $M\times N$ ，im_info=[M, N, scale_factor]则保存了此次缩放的所有信息。然后经过Conv Layers，经过4次pooling变为 $W\times H=(M/16)\times(N/16)$ 大小，其中feature_stride=16则保存了该信息，用于计算anchor偏移量。 Proposal Layer forward（caffe layer的前传函数）按照以下顺序依次处理： 生成anchors，利用$[d_{x}(A),d_{y}(A),d_{w}(A),d_{h}(A)]$对所有的anchors做bbox regression回归（这里的anchors生成和训练时完全一致） 按照输入的foreground softmax scores由大到小排序anchors，提取前pre_nms_topN(e.g. 6000)个anchors，即提取修正位置后的foreground anchors。 限定超出图像边界的foreground anchors为图像边界（防止后续roi pooling时proposal超出图像边界） 剔除非常小（width&lt;threshold or height&lt;threshold）的foreground anchors 进行nonmaximum suppression 再次按照nms后的foreground softmax scores由大到小排序fg anchors，提取前post_nms_topN(e.g. 300)结果作为proposal输出。 之后输出 proposal=[x1, y1, x2, y2] ，注意，由于在第三步中将anchors映射回原图判断是否超出边界，所以这里输出的proposal是对应 $M\times N$ 输入图像尺度的，这点在后续网络中有用。另外我认为，严格意义上的检测应该到此就结束了，后续部分应该属于识别了~ RPN网络结构就介绍到这里，总结起来就是：生成anchors -&gt; softmax分类器提取fg anchors -&gt; bbox reg回归fg anchors -&gt; Proposal Layer生成proposals 【19/06/2018】处理 XML 文档使用 xml.etree.ElementTree 这个包去解析XML文件， 并且整理成为list形式【流程】 读取XML文件 区分训练集测试集根据竞赛要求 解析XML文档收录到PYTHON词典中Github 的 jupyter notebook 地址 训练集根据竞赛的 trainval.txt 文件给的图片作为训练集其余的作为训练集 解析后， 总共有 17125 张图片，其中 11540 张作为训练集 图片中的20个类的统计情况： 【20/06/2018】根据信息画出BBOXES安装 cv2 这个包 1pip install opencv-python注意： OpenCV-python 中颜色格式 是BGR 而不是 RGB 在VOC2012数据集里面，总共有20类， 根据不同的种类用不同的颜色和唯一的编码画BBOXES。 class class_mapping BGR of bbox Person 0 (0, 0, 255) Aeroplane 1 (0, 0, 255) Tvmonitor 2 (0, 128, 0) Train 3 (128, 128, 128) Boat 4 (0, 165, 255) Dog 5 (0, 255, 255) Chair 6 (80, 127, 255) Bird 7 (208, 224, 64) Bicycle 8 (235, 206, 135) Bottle 9 (128, 0, 0) Sheep 10 (140, 180, 210) Diningtable 11 (0, 255, 0) Horse 12 (133, 21, 199) Motorbike 13 (47, 107, 85) Sofa 14 (19, 69, 139) Cow 15 (222, 196, 176) Car 16 (0, 0, 0) Cat 17 (225, 105, 65) Bus 18 (255, 255, 255) Pottedplant 19 (205, 250, 255) 我写了一个show_image_with_bbox函数去画出带BBOXES的图根据处理XML文件得到的list: Github 的 jupyter notebook 地址EXAMPLE: 【21/06/2018】config settingset config class: for image enhancement: image enhancementAccording to the config of three peremeters, users could augment image with 3 different ways or using them all.For horizontal and vertical flips, 1/3 probability to triggleWith 0,90,180,270 rotation,This function could increase the number of datasets.image flips and rotation are realized by opencv and replace of height and widthNew cordinates of bboxes are calculated acccording to different change of imagedetailed in Github, jupyter notebook: addressOrignal image:horizontal flip:Vertical filp:Random rotation:Horizontal and then vertical flips: 【22/06/2018】Image reziseThis function is to rezise input image to a uniform size with same shortest side According to set the value of shortest side, convergent-divergent or augmented another side proportion Test:Left image is resized image, in this case, the orignal image amplified. Class BalanceWhen training the model, if we sent image with no repeating classes, it may help to improve the performance of model. Therefore, this function is to make sure no repeating classes in two closed input image. Test: Random output 4 iamge with is function, it could find no repeating classes in two closed image. However, it may reduce the number of trainning image because skip some images. 【25~26/06/2018】Region Proposal Networks(RPN)可以看到RPN网络实际分为2条线，上面一条通过softmax分类anchors获得foreground和background（检测目标是foreground），下面一条用于计算对于anchors的bounding box regression偏移量，以获得精确的proposal。而最后的Proposal层则负责综合foreground anchors和bounding box regression偏移量获取proposals，同时剔除太小和超出边界的proposals。其实整个网络到了Proposal Layer这里，就完成了相当于目标定位的功能。 Anchors对每一个点生成的矩形 其中每行的4个值 (x1,y1,x2,y2) 代表矩形左上和右下角点坐标。9个矩形共有3种形状，长宽比为大约为 width:height = [1:1, 1:2, 2:1] 通过遍历Conv layers计算获得的feature maps，为每一个点都配备这9种anchors作为初始的检测框。这样做获得检测框很不准确，不用担心，后面还有2次bounding box regression可以修正检测框位置. Code12345678""" intersection of two bboxes@param ai: left top x,y and right bottom x,y coordinates of bbox 1@param bi: left top x,y and right bottom x,y coordinates of bbox 2@return: area_union: whether contain target classes"""def intersection(ai, bi): 123456789""" union of two bboxes@param au: left top x,y and right bottom x,y coordinates of bbox 1@param bu: left top x,y and right bottom x,y coordinates of bbox 2@param area_intersection: intersection area@return: area_union: whether contain target classes"""def union(au, bu, area_intersection): 12345678""" calculate ratio of intersection and union@param a: left top x,y and right bottom x,y coordinates of bbox 1@param b: left top x,y and right bottom x,y coordinates of bbox 2@return: ratio of intersection and union of two bboxes"""def iou(a, b): IOU is used to bounding box regression rpn calculation Traversal all pre-anchors to calculate IOU with GT bboxes Set number and proprty of pre-anchors return specity number of result(Anchors) 12345678910111213141516""" @param C: configuration@param img_data: parsered xml information@param width: orignal width of image@param hegiht: orignal height of image@param resized_width: resized width of image after image processing@param resized_heighth: resized height of image after image processing@param img_length_calc_function: Keras's image_dim_ordering function@return: np.copy(y_rpn_cls): whether contain target classes@return: np.copy(y_rpn_regr): corrspoding return of gradient"""def calc_rpn(C, img_data, width, height, resized_width, resized_height, img_length_calc_function): 【注：其只会返回num_regions（这里设置为256）个有效的正负样本 】 【流程】Initialise paramters: see jupyter notebook Calculate the size of map feature:1(output_width, output_height) = img_length_calc_function(resized_width, resized_height) Get the GT box coordinates, and resize to account for image resizingafter rezised functon, the coordinates of bboxes need to re-calculation:12345for bbox_num, bbox in enumerate(img_data['bboxes']): gta[bbox_num, 0] = bbox['x1'] * (resized_width / float(width)) gta[bbox_num, 1] = bbox['x2'] * (resized_width / float(width)) gta[bbox_num, 2] = bbox['y1'] * (resized_height / float(height)) gta[bbox_num, 3] = bbox['y2'] * (resized_height / float(height)) 【注意gta的存储形式是（x1,x2,y1,y2）而不是（x1,y1,x2,y2）】Traverse all possible group of sizesanchor box scales [128, 256, 512]anchor box ratios [1:1,1:2,2:1]1234for anchor_size_idx in range(len(anchor_sizes)): for anchor_ratio_idx in range(len(anchor_ratios)): anchor_x = anchor_sizes[anchor_size_idx] * anchor_ratios[anchor_ratio_idx][0] anchor_y = anchor_sizes[anchor_size_idx] * anchor_ratios[anchor_ratio_idx][1] Traver one bbox group, all pre boxes generated by anchors output_width，output_height：width and height of map featuredownscale：mapping ration, defualt 16if to delete box out of iamge 12345678910111213for ix in range(output_width): x1_anc = downscale * (ix + 0.5) - anchor_x / 2 x2_anc = downscale * (ix + 0.5) + anchor_x / 2 if x1_anc &lt; 0 or x2_anc &gt; resized_width: continue for jy in range(output_height): y1_anc = downscale * (jy + 0.5) - anchor_y / 2 y2_anc = downscale * (jy + 0.5) + anchor_y / 2 if y1_anc &lt; 0 or y2_anc &gt; resized_height: continue 【注：现在我们确定了一个预选框组合有确定了中心点那就是唯一确定一个框了，接下来就是来确定这个宽的性质了：是否包含物体、如包含物体其回归梯度是多少】 要确定以上两个性质，每一个框都需要遍历图中的所有bboxes 然后计算该预选框与bbox的交并比（IOU）如果现在的交并比curr_iou大于该bbox最好的交并比或者大于给定的阈值则求下列参数，这些参数是后来要用的即回归梯度 tx：两个框中心的宽的距离与预选框宽的比ty:同txtw:bbox的宽与预选框宽的比th:同理 12345678910if curr_iou &gt; best_iou_for_bbox[bbox_num] or curr_iou &gt; C.rpn_max_overlap: cx = (gta[bbox_num, 0] + gta[bbox_num, 1]) / 2.0 cy = (gta[bbox_num, 2] + gta[bbox_num, 3]) / 2.0 cxa = (x1_anc + x2_anc) / 2.0 cya = (y1_anc + y2_anc) / 2.0 tx = (cx - cxa) / (x2_anc - x1_anc) ty = (cy - cya) / (y2_anc - y1_anc) tw = np.log((gta[bbox_num, 1] - gta[bbox_num, 0]) / (x2_anc - x1_anc)) th = np.log((gta[bbox_num, 3] - gta[bbox_num, 2])) / (y2_anc - y1_anc) 对应于Faster RCNN原文，foreground anchor与ground truth之间的平移量 $(t_x, t_y)$ 如下： 对于训练bouding box regression网络回归分支，输入是cnn feature Φ，监督信号是Anchor与GT的差距 $(t_x, t_y, t_w, t_h)$，即训练目标是：输入 Φ的情况下使网络输出与监督信号尽可能接近。那么当bouding box regression工作时，再输入Φ时，回归网络分支的输出就是每个Anchor的平移量和变换尺度 $(t_x, t_y, t_w, t_h)$，显然即可用来修正Anchor位置了。 如果相交的不是背景，那么进行一系列更新 关于bbox的相关信息更新预选框的相关更新：如果交并比大于阈值这是posbest_iou_for_loc：其记录的是有最大交并比为多少和其对应的回归梯度num_anchors_for_bbox[bbox_num]：记录的是bbox拥有的pos预选框的个数如果小于最小阈值是neg，在这两个之间是neutral需要注意的是：判断一个框为neg需要其与所有的bbox的交并比都小于最小的阈值 1234567891011121314151617181920if img_data['bboxes'][bbox_num]['class'] != 'bg': # all GT boxes should be mapped to an anchor box, so we keep track of which anchor box was best if curr_iou &gt; best_iou_for_bbox[bbox_num]: best_anchor_for_bbox[bbox_num] = [jy, ix, anchor_ratio_idx, anchor_size_idx] best_iou_for_bbox[bbox_num] = curr_iou best_x_for_bbox[bbox_num, :] = [x1_anc, x2_anc, y1_anc, y2_anc] best_dx_for_bbox[bbox_num, :] = [tx, ty, tw, th] if curr_iou &gt; C.rpn_max_overlap: bbox_type = 'pos' num_anchors_for_bbox[bbox_num] += 1 if curr_iou &gt; best_iou_for_loc: best_iou_for_loc = curr_iou best_regr = (tx, ty, tw, th) if C.rpn_min_overlap &lt; curr_iou &lt; C.rpn_max_overlap: if bbox_type != 'pos': bbox_type = 'neutral' 当结束对所有的bbox的遍历时，来确定该预选宽的性质。 y_is_box_valid：该预选框是否可用（nertual就是不可用的）y_rpn_overlap：该预选框是否包含物体y_rpn_regr:回归梯度1234567891011if bbox_type == 'neg': y_is_box_valid[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 1 y_rpn_overlap[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 0elif bbox_type == 'neutral': y_is_box_valid[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 0 y_rpn_overlap[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 0else: y_is_box_valid[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 1 y_rpn_overlap[jy, ix, anchor_ratio_idx + n_anchratios * anchor_size_idx] = 1 start = 4 * (anchor_ratio_idx + n_anchratios * anchor_size_idx) y_rpn_regr[jy, ix, start:start+4] = best_regr 如果有一个bbox没有pos的预选宽和其对应，这找一个与它交并比最高的anchor的设置为pos123456789for idx in range(num_anchors_for_bbox.shape[0]): if num_anchors_for_bbox[idx] == 0: # no box with an IOU greater than zero ... if best_anchor_for_bbox[idx, 0] == -1: continue y_is_box_valid[best_anchor_for_bbox[idx,0], best_anchor_for_bbox[idx,1], best_anchor_for_bbox[idx,2] + n_anchratios *best_anchor_for_bbox[idx,3]] = 1 y_rpn_overlap[best_anchor_for_bbox[idx,0], best_anchor_for_bbox[idx,1], best_anchor_for_bbox[idx,2] + n_anchratios *best_anchor_for_bbox[idx,3]] = 1 start = 4 * (best_anchor_for_bbox[idx,2] + n_anchratios * best_anchor_for_bbox[idx,3]) y_rpn_regr[best_anchor_for_bbox[idx,0], best_anchor_for_bbox[idx,1], start:start+4] = best_dx_for_bbox[idx, :] 将深度变到第一位，给向量增加一个维度, 在Tensorflow中， 第一纬度是batch size, 此外， 变换向量位置匹配要求12345678y_rpn_overlap = np.transpose(y_rpn_overlap, (2, 0, 1))y_rpn_overlap = np.expand_dims(y_rpn_overlap, axis=0)y_is_box_valid = np.transpose(y_is_box_valid, (2, 0, 1))y_is_box_valid = np.expand_dims(y_is_box_valid, axis=0)y_rpn_regr = np.transpose(y_rpn_regr, (2, 0, 1))y_rpn_regr = np.expand_dims(y_rpn_regr, axis=0) 从可用的预选框中选择num_regions如果pos的个数大于num_regions / 2，则将多下来的地方置为不可用。如果小于pos不做处理接下来将pos与neg总是超过num_regions个的neg预选框置为不可用最后， 256个预选框，128个positive,128个negative 会生成 在一张图片里面123456789101112pos_locs = np.where(np(y_rpn_overlap[0, :, :, :] =.logical_and= 1, y_is_box_valid[0, :, :, :] == 1))neg_locs = np.where(np.logical_and(y_rpn_overlap[0, :, :, :] == 0, y_is_box_valid[0, :, :, :] == 1))num_regions = 256if len(pos_locs[0]) &gt; num_regions / 2: val_locs = random.sample(range(len(pos_locs[0])), len(pos_locs[0]) - num_regions / 2) y_is_box_valid[0, pos_locs[0][val_locs], pos_locs[1][val_locs], pos_locs[2][val_locs]] = 0 num_pos = num_regions / 2if len(neg_locs[0]) + num_pos &gt; num_regions: val_locs = random.sample(range(len(neg_locs[0])), len(neg_locs[0]) - num_pos) y_is_box_valid[0, neg_locs[0][val_locs], neg_locs[1][val_locs], neg_locs[2][val_locs]] = 0 【27/06/2018】project briefRe organization of Project plan Anchors IterativeIntegration of privous work:In each anchor: config file -&gt; rpn_stride = 16 means generate one anchor in 16 pixelsJupyter Notebook address 【流程】Function description12345678910111213141516"""@param all_img_data: Parsered xml file @param class_count: Counting of the number of all classes objects@param C: Configuration class@param img_length_calc_function: resnet's get_img_output_length() function@param backend: Tensorflow in this project#param mode: train or valyield np.copy(x_img), [np.copy(y_rpn_cls), np.copy(y_rpn_regr)], img_data_aug@return: np.copy(x_img): image's matrix data@return: [np.copy(y_rpn_cls), np.copy(y_rpn_regr)]: calculated rpn class and radient@return: img_data_aug: correspoding parsed xml information"""def get_anchor_gt(all_img_data, class_count, C, img_length_calc_function, backend, mode='train'): Traverse all input image based on input xml information Apply class balance function: 1234C.balanced_classes = Truesample_selector = image_processing.SampleSelector(class_count)if C.balanced_classes and sample_selector.skip_sample_for_balanced_class(img_data): continue Apply image enhanceif input mode is train, apply image enhance to obtain augmented image xml and matrix, if mode is val, obtain image orignal xml and matrix1234if mode == 'train': img_data_aug, x_img = image_enhance.augment(img_data, C, augment=True)else: img_data_aug, x_img = image_enhance.augment(img_data, C, augment=False) verifacation width and hegiht in xml and matrix1234(width, height) = (img_data_aug['width'], img_data_aug['height'])(rows, cols, _) = x_img.shapeassert cols == widthassert rows == height Apply rezise function12(resized_width, resized_height) = image_processing.get_new_img_size(width, height, C.im_size)x_img = cv2.resize(x_img, (resized_width, resized_height), interpolation=cv2.INTER_CUBIC) Apply rpn calculation1y_rpn_cls, y_rpn_regr = rpn_calculation.calc_rpn(C, img_data_aug, width, height, resized_width, resized_height, img_length_calc_function) Zero-center by mean pixel, and preprocess image formatBGR -&gt; RGB because when apply resnet, it need RGB but in cv2, it use BGR 1x_img = x_img[:,:, (2, 1, 0)] For using pre-trainning model, needs to mins mean channel in each dim 12345x_img = x_img.astype(np.float32)x_img[:, :, 0] -= C.img_channel_mean[0]x_img[:, :, 1] -= C.img_channel_mean[1]x_img[:, :, 2] -= C.img_channel_mean[2]x_img /= C.img_scaling_factor # default to 1,so no change here expand for batch size 1x_img = np.expand_dims(x_img, axis=0) for using pre-trainning model, need to sclaling the std to match pre trained model 1y_rpn_regr[:, y_rpn_regr.shape[1]//2:, :, :] *= C.std_scaling # scaling is 4 here in tensorflow, sort as batch size, width, height, deep 1234if backend == 'tf': x_img = np.transpose(x_img, (0, 3, 2, 1)) y_rpn_cls = np.transpose(y_rpn_cls, (0, 3, 2, 1)) y_rpn_regr = np.transpose(y_rpn_regr, (0, 3, 2, 1)) generator to iteror, using next() to loop 1yield np.copy(x_img), [np.copy(y_rpn_cls), np.copy(y_rpn_regr)], img_data_aug 【执行】12data_gen_train = get_anchor_gt(train_imgs, classes_count, C, nn.get_img_output_length, K.image_dim_ordering(), mode='train')data_gen_val = get_anchor_gt(val_imgs, classes_count, C, nn.get_img_output_length,K.image_dim_ordering(), mode='val') Test:1img,rpn,img_aug = next(data_gen_train) 【28/06/2018】Resnet50 structure论文链接: https://arxiv.org/abs/1512.03385 首先，我们要问一个问题：Is learning better networks as easy as stacking more layers? 很显然不是，原因有二。一，vanishing/exploding gradients；深度会带来恶名昭著的梯度弥散/爆炸，导致系统不能收敛。然而梯度弥散/爆炸在很大程度上被normalized initialization and intermediate normalization layers处理了。二、degradation；当深度开始增加的时候，accuracy经常会达到饱和，然后开始下降，但这并不是由于过拟合引起的。可见figure1，56-layer的error大于20-layer的error。 He kaiMing大神认为靠堆layers竟然会导致degradation，那肯定是我们堆的方式不对。因此他提出了一种基于残差块的identity mapping，通过学习残差的方式，而非直接去学习直接的映射关系。 事实证明，靠堆积残差块能够带来很好效果提升。而不断堆积plain layer却会带来很高的训练误差残差块的两个优点：1) Our extremely deep residual nets are easy to optimize, but the counterpart “plain” nets (that simply stack layers) exhibit higher training error when the depth increases;2) Our deep residual nets can easily enjoy accuracy gains from greatly increased depth, producing results substantially better than previous networks. 【29/06/2018】Resnet50 image structureResNet有2个基本的block，一个是Identity Block，输入和输出的dimension是一样的，所以可以串联多个；另外一个基本block是Conv Block，输入和输出的dimension是不一样的，所以不能连续串联，它的作用本来就是为了改变feature vector的dimension 因为CNN最后都是要把image一点点的convert成很小但是depth很深的feature map，一般的套路是用统一的比较小的kernel（比如VGG都是用3x3），但是随着网络深度的增加，output的channel也增大（学到的东西越来越复杂），所以有必要在进入Identity Block之前，用Conv Block转换一下维度，这样后面就可以连续接Identity Block. 可以看下Conv Block是怎么改变输出维度的:其实就是在shortcut path的地方加上一个conv2D layer（1x1 filter size），然后在main path改变dimension，并与shortcut path对应起来. July【02/07/2018】Construct resnet by keras残差网络的关键步骤，跨层的合并需要保证x和F(x)的shape是完全一样的，否则它们加不起来。 理解了这一点，我们开始用keras做实现，我们把输入输出大小相同的模块称为identity_block，而把输出比输入小的模块称为conv_block，首先，导入所需的模块： 1234from keras.models import Modelfrom keras.layers import Input,Dense,BatchNormalization,Conv2D,MaxPooling2D,AveragePooling2D,ZeroPadding2Dfrom keras.layers import add,Flattenfrom keras.optimizers import SGD 我们先来编写identity_block，这是一个函数，接受一个张量为输入，并返回一个张量, 然后是conv层，是有shortcut的：1234567891011121314151617181920212223def Conv2d_BN(x, nb_filter,kernel_size, strides=(1,1), padding='same',name=None): if name is not None: bn_name = name + '_bn' conv_name = name + '_conv' else: bn_name = None conv_name = None x = Conv2D(nb_filter,kernel_size,padding=padding,strides=strides,activation='relu',name=conv_name)(x) x = BatchNormalization(axis=3,name=bn_name)(x) return x def Conv_Block(inpt,nb_filter,kernel_size,strides=(1,1), with_conv_shortcut=False): x = Conv2d_BN(inpt,nb_filter=nb_filter[0],kernel_size=(1,1),strides=strides,padding='same') x = Conv2d_BN(x, nb_filter=nb_filter[1], kernel_size=(3,3), padding='same') x = Conv2d_BN(x, nb_filter=nb_filter[2], kernel_size=(1,1), padding='same') if with_conv_shortcut: shortcut = Conv2d_BN(inpt,nb_filter=nb_filter[2],strides=strides,kernel_size=kernel_size) x = add([x,shortcut]) return x else: x = add([x,inpt]) return x 剩下的事情就很简单了，数好identity_block和conv_block是如何交错的，照着网络搭就好了：1234567891011121314151617181920212223242526272829303132inpt = Input(shape=(224,224,3))x = ZeroPadding2D((3,3))(inpt)x = Conv2d_BN(x,nb_filter=64,kernel_size=(7,7),strides=(2,2),padding='valid')x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x) x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3),strides=(1,1),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3))x = AveragePooling2D(pool_size=(7,7))(x)x = Flatten()(x)x = Dense(1000,activation='softmax')(x)model = Model(inputs=inpt,outputs=x)sgd = SGD(decay=0.0001,momentum=0.9)model.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])model.summary() jupyter notebook 【03/07/2018】load pre-trained model of resnet50步骤如下： 下载ResNet50不包含全连接层的模型参数到本地（resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5）； 定义好ResNet50的网络结构； 将预训练的模型参数加载到我们所定义的网络结构中； 更改全连接层结构，便于对我们的分类任务进行处 或者根据需要解冻最后几个block，然后以很低的学习率开始训练。我们只选择最后一个block进行训练，是因为训练样本很少，而ResNet50模型层数很多，全部训练肯定不能训练好，会过拟合。 其次fine-tune时由于是在一个已经训练好的模型上进行的，故权值更新应该是一个小范围的，以免破坏预训练好的特征。 下载地址 因为使用了预训练模型，参数名称需要和预训练模型一致：identity层：1234567891011121314151617181920212223242526272829def identity_block(X, f, filters, stage, block): # defining name basis conv_name_base = 'res' + str(stage) + block + '_branch' bn_name_base = 'bn' + str(stage) + block + '_branch' # Retrieve Filters F1, F2, F3 = filters # Save the input value. You'll need this later to add back to the main path. X_shortcut = X # First component of main path X = Conv2D(filters = F1, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2a')(X) X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X) X = Activation('relu')(X) # Second component of main path (≈3 lines) X = Conv2D(filters= F2, kernel_size=(f,f),strides=(1,1),padding='same',name=conv_name_base + '2b')(X) X = BatchNormalization(axis=3,name=bn_name_base+'2b')(X) X = Activation('relu')(X) # Third component of main path (≈2 lines) X = Conv2D(filters=F3,kernel_size=(1,1),strides=(1,1),padding='valid',name=conv_name_base+'2c')(X) X = BatchNormalization(axis=3,name=bn_name_base+'2c')(X) # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines) X = Add()([X, X_shortcut]) X = Activation('relu')(X) return X conv层：1234567891011121314151617181920212223242526272829303132333435def convolutional_block(X, f, filters, stage, block, s = 2): # defining name basis conv_name_base = 'res' + str(stage) + block + '_branch' bn_name_base = 'bn' + str(stage) + block + '_branch' # Retrieve Filters F1, F2, F3 = filters # Save the input value X_shortcut = X ##### MAIN PATH ##### # First component of main path X = Conv2D(F1, (1, 1), strides = (s,s),padding='valid',name = conv_name_base + '2a')(X) X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X) X = Activation('relu')(X) # Second component of main path (≈3 lines) X = Conv2D(F2,(f,f),strides=(1,1),padding='same',name=conv_name_base+'2b')(X) X = BatchNormalization(axis=3,name=bn_name_base+'2b')(X) X = Activation('relu')(X) # Third component of main path (≈2 lines) X = Conv2D(F3,(1,1),strides=(1,1),padding='valid',name=conv_name_base+'2c')(X) X = BatchNormalization(axis=3,name=bn_name_base+'2c')(X) ##### SHORTCUT PATH #### (≈2 lines) X_shortcut = Conv2D(F3,(1,1),strides=(s,s),padding='valid',name=conv_name_base+'1')(X_shortcut) X_shortcut = BatchNormalization(axis=3,name =bn_name_base+'1')(X_shortcut) # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines) X = Add()([X,X_shortcut]) X = Activation('relu')(X) return X resnet50结构：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def ResNet50(input_shape = (64, 64, 3), classes = 30): # Define the input as a tensor with shape input_shape X_input = Input(input_shape) # Zero-Padding X = ZeroPadding2D((3, 3))(X_input) # Stage 1 X = Conv2D(64, (7, 7), strides = (2, 2), name = 'conv1')(X) X = BatchNormalization(axis = 3, name = 'bn_conv1')(X) X = Activation('relu')(X) X = MaxPooling2D((3, 3), strides=(2, 2))(X) # Stage 2 X = convolutional_block(X, f = 3, filters = [64, 64, 256], stage = 2, block='a', s = 1) X = identity_block(X, 3, [64, 64, 256], stage=2, block='b') X = identity_block(X, 3, [64, 64, 256], stage=2, block='c') ### START CODE HERE ### # Stage 3 (≈4 lines) X = convolutional_block(X, f = 3,filters= [128,128,512],stage=3,block='a',s=2) X = identity_block(X,3,[128,128,512],stage=3,block='b') X = identity_block(X,3,[128,128,512],stage=3,block='c') X = identity_block(X,3,[128,128,512],stage=3,block='d') # Stage 4 (≈6 lines) X = convolutional_block(X,f=3,filters=[256,256,1024],stage=4,block='a',s=2) X = identity_block(X,3,[256,256,1024],stage=4,block='b') X = identity_block(X,3,[256,256,1024],stage=4,block='c') X = identity_block(X,3,[256,256,1024],stage=4,block='d') X = identity_block(X,3,[256,256,1024],stage=4,block='e') X = identity_block(X,3,[256,256,1024],stage=4,block='f') # Stage 5 (≈3 lines) X = convolutional_block(X, f = 3,filters= [512,512,2048],stage=5,block='a',s=2) X = identity_block(X,3,[512,512,2048],stage=5,block='b') X = identity_block(X,3,[512,512,2048],stage=5,block='c') # AVGPOOL (≈1 line). Use "X = AveragePooling2D(...)(X)" X = AveragePooling2D((2,2),strides=(2,2))(X) # output layer X = Flatten()(X) model = Model(inputs = X_input, outputs = X, name='ResNet50') return model 构建网络并且载入权重：12base_model = ResNet50(input_shape=(224,224,3),classes=30) base_model.load_weights('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5') 无法载入 【04/07/2018】Loading pre-trained model对于keras：如果新模型和旧模型结构一样，直接调用model.load_weights读取参数就行。如果新模型中的几层和之前模型一样，也通过model.load_weights(‘my_model_weights.h5’, by_name=True)来读取参数， 或者手动对每一层进行参数的赋值，比如x= Dense(100, weights=oldModel.layers[1].get_weights())(x) 修改代码：12345try: base_model.load_weights('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5',by_name=True) print("load successful")except: print("load failed") 载入成功：jupyter notebook 【05~06/07/2018】construct faster rcnn netAugustSeptember]]></content>
      <categories>
        <category>Msc Project</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Object Detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四月は君の嘘]]></title>
    <url>%2F2018%2F04%2F30%2FApri%2F</url>
    <content type="text"><![CDATA[YouTube Source【四月是你的謊言AMV】你還會記得嗎？四月は君の嘘 Your Lie in April BiliBili Source【四月是你的谎言】你还会记得吗 4月的最后一天了呢与你相遇的四月就要来了「君と出会った四月が来ているから」没有你的四月就要来了「君のいない四月は来ないで」]]></content>
      <categories>
        <category>My Life</category>
      </categories>
      <tags>
        <tag>友人A</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Using Machine Learning in NBA]]></title>
    <url>%2F2018%2F01%2F31%2FMachine%20Learning%20in%20NBA%2F</url>
    <content type="text"><![CDATA[Fan-map plotting Obtain the game data in 2000~2017 in NBA Obtain the follwers of 2015~2017 NBA rookies by twittR package Obtain location information and plot the fan-map by Tableau Machine learning applyall-star players in 2017 prediction PCA 主成份分析 in all-star player prediction Keras是一个高层神经网络API，Keras由纯Python编写而成并基Tensorflow后端 All-star players in 2017 prediction Tensorboard is used to compare and choose better model. Best rookies in 2017 prediction PCA 主成份分析 in best rookies prediction Keras是一个高层神经网络API，Keras由纯Python编写而成并基Tensorflow后端 Best rookies in 2017 prediction First and Second rookies in 2017 prediction Muti-classes classification application Tensorboard is used to compare and choose better model. Potential all-star players in 2015~16 prediction PCA 主成份分析 in potential rookies prediction Keras是一个高层神经网络API，Keras由纯Python编写而成并基Tensorflow后端 Potential rookies in 2015~16 prediction Tensorboard is used to compare and choose better model. ResultWebsite: 2017 NBA ALL-STAR AND BEST ROOKIES PREDICTION WITH FAN-MAPexample: Neural network model 2D PCA (linear unseparable) Tensorboard check]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>NBA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MXnet 配置]]></title>
    <url>%2F2018%2F01%2F28%2FMXnet_Config%2F</url>
    <content type="text"><![CDATA[MXnet GPU version configuration (Windows 10. GTX960M)Tools Microsoft Visual Studio 2015 CUDA 9.0 cuDNN7 CMake OpenCV3.0 OpenBLAS Anaconda Graphviz Methods Step 1: Install VS2015 Step 2: Install CUDA 9.0 Step 3: Install cuDNN7 解压后把cudnn目录下的bin目录加到PATH环境变量里 Step 4: Install Opencv 下载并解压，然后创建环境变量OpenCV_DIR，把opencv/build目录添加进去,把\opencv\build\x64\vc12\bin和\opencv\build\x86\vc12\bin添加到PATH路径 Step 5: Install openBLAS 需要下载mingw64_dll.zip和OpenBLAS-v0.2.14-Win64-int64.zip两个文件. 创建环境变量 OpenBLAS_HOME，把openBLAS根目录加进去,把DLL所在目录需要添加到环境变量path中. 创建 “C:\Program files (x86)\OpenBLAS\” 复制相关文件进去 Step 6: Install Anaconda 把安装路径添加到PATH里去 Step 7: Install MXnet 创建MXnet 文件夹 然后使用命令行CD至该文件夹 1git clone --recursive https://github.com/dmlc/mxnet 在根目录创建build文件夹 (补充操作 目前未使用： 打开make文件夹的config.mk 文件 修改USE_CUDNN = 0 to USE_CUDNN = 1, 修改USE_BLAS = openBLAS ) Step 8: Install Cmake Configure and Genreate VS工程 mxnet.sln Configure的配置选择如下图 Step 9: 使用VS2015 打开mxnet.sln 切换成release模式 64位 然后启动编译 编译完成后，在mxnet_build\Release目录下生成了libmxnet.dll文件 Step 10: Install graphviz library 添加安装路径到环境变量path Step 11: 使用Anaconda的命令行 新建一个虚拟环境 1conda create --name MXNet python=2.7 MXNET目前不太适配python3, 激活环境 1activate MXNet Step 12: cd 至mxnet文件夹的python文件夹里， 拷贝如图的各个文件到该文件夹 然后使用 1python setup.py install Step 13: 再次拷贝上图的文件到Anaconda的MXNet虚拟环境的 Lib\site-packages\mxnet-版本名.egg\mxnet 中 并且添加此路径到环境变量path中 Step 14: 1conda install nb_conda 激活这个虚拟环境到juptyer notebook里面 打开jupyter book就可以进行测试了]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>MXnet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT salary in USA]]></title>
    <url>%2F2018%2F01%2F28%2FIT%20salary%20in%20USA%2F</url>
    <content type="text"><![CDATA[ResultChart with Anlysis Website: SALARY DISTRIBUTION OF DIFFERENT JOBS IN USA Data processDatasets used to anlysis U.S. Technology Jobs on Dice.com Found in Kaggle US jobs on Monster.com Found in KaggleData Clean Obtain salay and coresspoding states information in US jos on Monster.com clean process Obtain salay and coresspoding cities information in US jos on Monster.com clean process Obtain skills information in U.S Technology Jobs on Dice.com clean process Chart PlottingChart 1: Map chart of average salay of 3 types jobsTableau address Chart 2: Bubble chart of average salay of 3 types jobsTableau address Chart 3 : Cloud words chart of skills used in IT-jobsCloud words tool]]></content>
      <categories>
        <category>Data Visualisation</category>
      </categories>
      <tags>
        <tag>data analysis</tag>
      </tags>
  </entry>
</search>
